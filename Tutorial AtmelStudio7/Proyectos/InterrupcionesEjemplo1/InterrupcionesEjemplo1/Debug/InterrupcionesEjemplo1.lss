
InterrupcionesEjemplo1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000090  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000005a  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000058  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b1  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000004a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	20 c0       	rjmp	.+64     	; 0x52 <__vector_8>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	24 c0       	rjmp	.+72     	; 0x7e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
// #define _BV( bit ) ( 1<<(bit) ) // macro para facilitar la escritura de los comandos para leer y escribir sobre registros del microcontrolador.
#define COUNTER_INIT 61630 // valor a partir del cual debe empezar a contar el temporizador.

int main(void)
{
	DDRB |= _BV(1); // se establece el pin PB1 como salida digital
  38:	b9 9a       	sbi	0x17, 1	; 23
	
	sei(); // funcion que configura registros para habilitar interrupciones.
  3a:	78 94       	sei
	TCNT1 = COUNTER_INIT; // se inicializa el temporizador en 616630
  3c:	8e eb       	ldi	r24, 0xBE	; 190
  3e:	90 ef       	ldi	r25, 0xF0	; 240
  40:	9d bd       	out	0x2d, r25	; 45
  42:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= _BV(2); // se habilita la interrupcion de overflow en temporizador 1
  44:	89 b7       	in	r24, 0x39	; 57
  46:	84 60       	ori	r24, 0x04	; 4
  48:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= _BV(2) | _BV(0); // se establece fuente de reloj con preescalamiento de 1024
  4a:	8e b5       	in	r24, 0x2e	; 46
  4c:	85 60       	ori	r24, 0x05	; 5
  4e:	8e bd       	out	0x2e, r24	; 46

#define F_CPU 4000000UL //(1Mhz) macro para definir la frecuencia de trabajo del microcontrolador. se usa en la implementacion del comando delay.
// #define _BV( bit ) ( 1<<(bit) ) // macro para facilitar la escritura de los comandos para leer y escribir sobre registros del microcontrolador.
#define COUNTER_INIT 61630 // valor a partir del cual debe empezar a contar el temporizador.

int main(void)
  50:	ff cf       	rjmp	.-2      	; 0x50 <__SREG__+0x11>

00000052 <__vector_8>:
		// se queda enganchado en el while sin hacer nada.
    }
}

// rutina de interrupcion cuando se desborda el temporizador 1
ISR(TIMER1_OVF_vect){
  52:	1f 92       	push	r1
  54:	0f 92       	push	r0
  56:	0f b6       	in	r0, 0x3f	; 63
  58:	0f 92       	push	r0
  5a:	11 24       	eor	r1, r1
  5c:	8f 93       	push	r24
  5e:	9f 93       	push	r25
	TCNT1 = COUNTER_INIT; // se recarga nuevamente el temporizador en 61630
  60:	8e eb       	ldi	r24, 0xBE	; 190
  62:	90 ef       	ldi	r25, 0xF0	; 240
  64:	9d bd       	out	0x2d, r25	; 45
  66:	8c bd       	out	0x2c, r24	; 44
	PORTB ^= _BV(1);
  68:	98 b3       	in	r25, 0x18	; 24
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	89 27       	eor	r24, r25
  6e:	88 bb       	out	0x18, r24	; 24
}
  70:	9f 91       	pop	r25
  72:	8f 91       	pop	r24
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>
