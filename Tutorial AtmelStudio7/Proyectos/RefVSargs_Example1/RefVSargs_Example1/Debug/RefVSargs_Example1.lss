
RefVSargs_Example1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000300  00800100  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016c  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d6  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000065  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e8  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  6c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	14 e0       	ldi	r17, 0x04	; 4
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e0       	ldi	r30, 0x00	; 0
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>
  92:	0e 94 5d 00 	call	0xba	; 0xba <main>
  96:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <_Z10mit_zeigerPd>:



// con apuntador.
int mit_zeiger(double *p){
	PORTC ^= _BV(0);
  9e:	95 b3       	in	r25, 0x15	; 21
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	85 bb       	out	0x15, r24	; 21
	return 1;
};
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret

000000ac <_Z11kein_zeigerPd>:


// pasando el arreglo completo.
int kein_zeiger(double Ar[192]){
	PORTC ^= _BV(0);
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 27       	eor	r24, r25
  b2:	85 bb       	out	0x15, r24	; 21
	return 1;
};
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <main>:
int mit_zeiger(double *p);
int kein_zeiger(double Ar[192]);


int main(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	d3 50       	subi	r29, 0x03	; 3
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
					-15678, 27878, 35867, 45345,
					-15678, 28765, 38768, 45876,
					-16587, 26875, 35876, 47568,
					-17658, 25867, 358, 485,
					-15987, 22352, 35245, 4542534					
	};
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	f1 e0       	ldi	r31, 0x01	; 1
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x20>
	
	
	// pin 0 del puerto C como salida digital.
	DDRC |= _BV(0);
  e2:	a0 9a       	sbi	0x14, 0	; 20
	double *p = FIR; // se obtiene el apuntador del arreglo de 480 elementos.
	
    while (1) 
    {
		int k;
		if( PINC&_BV(1) ){
  e4:	99 9b       	sbis	0x13, 1	; 19
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <main+0x38>
				k = mit_zeiger(p);
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z10mit_zeigerPd>
  f0:	f9 cf       	rjmp	.-14     	; 0xe4 <main+0x2a>
		} else {
				k = kein_zeiger(FIR);
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 56 00 	call	0xac	; 0xac <_Z11kein_zeigerPd>
  fa:	f4 cf       	rjmp	.-24     	; 0xe4 <main+0x2a>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
